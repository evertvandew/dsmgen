
from browser import html, console, bind, document
from browser.widgets.dialog import Dialog, EntryDialog, InfoDialog

from typing import List, Dict, Any

from property_editor import dataClassEditorForm, getFormValues

line_cls = 'eline'
name_cls = 'ename'


class Element: pass


context_menu_name = 'ContextMenu'


class ExplorerDataApi:
    """ Api that the explorer works with to manage its contents """
    def get_allowed_children(self, id: int) -> List[Element]:
        """ Determine which children can be contained by an element.
            Used to create the right-click menu
        """
        raise NotImplementedError
    def get_elements_async(self, cb):
        """ Retrieve a list of elements.
            Some of these elements can have children, representing a hierarchy
        """
        raise NotImplementedError
    def get_element(self, id: int) -> Element:
        raise NotImplementedError
    def add_element(self, details: Element):
        """ Persist a new element created with the right-click menu """
        raise NotImplementedError
    def move_element(self, id: int):
        """ Called when an element is moved in the hierarchy. """
        raise NotImplementedError
    def delete_element(self, id: int) -> bool:
        """ Called when an element is deleted.
            Returns True if the delete was successful, false if not.
        """
        raise NotImplementedError
    def update_element(self, id: int, clsname: str, update: Dict[str, Any]):
        raise NotImplementedError
    def on_click(self, id: int):
        """ Called when an element was left-clicked. """
        raise NotImplementedError


def toggle_caret(ev):
    ev.stopPropagation()
    ev.preventDefault()
    c = ev.target
    holder = c.parent.parent
    children = [c for c in holder.child_nodes if line_cls in c.classList]
    if 'fa-caret-right' in c.classList:
        c.classList.remove('fa-caret-right')
        c.classList.add('fa-caret-down')
        for child in children:
            child.style['display'] = 'block'
    else:
        c.classList.add('fa-caret-right')
        c.classList.remove('fa-caret-down')
        for child in children:
            child.style['display'] = 'none'


def format_name(name):
    """ Do additional formatting for a name displayed in the explorer """
    return f' &mdash; {name}'


def make_explorer(holder, api: ExplorerDataApi):
    def bind_events(data_element, html_element):
        @bind(html_element, 'click')
        def clickfunc(ev):
            api.on_click(data_element.Id)
            ev.stopPropagation()
            ev.preventDefault()

        def on_delete(ev):
            ev.stopPropagation()
            ev.preventDefault()
            document[context_menu_name].close()
            d = Dialog(f'Delete {type(data_element).__name__}', ok_cancel=True)
            d.panel <= f'Delete {type(data_element).__name__} "{data_element.name}"'


            @bind(d.ok_button, "click")
            def ok(ev):
                result = api.delete_element(data_element.Id, type(data_element).__name__)
                d.close()
                if result:
                    del document[data_element.Id]
                    msg = InfoDialog('Success', f'{data_element.name} was deleted')
                else:
                    msg = InfoDialog('Failure', f'Could not delete "{data_element.name}"')

        def on_rename(ev):
            ev.stopPropagation()
            ev.preventDefault()
            document[context_menu_name].close()
            d = EntryDialog(f'Rename {type(data_element).__name__}', 'new name:')

            @bind(d, "entry")
            def on_ok(ev):
                data = d.value
                api.update_element(data_element.Id, type(data_element).__name__, {'name': data})
                spans = html_element.select('.ename')
                for span in spans:
                    span.html = format_name(data)
                d.close()

        def on_add(ev, etype, parent):
            ev.stopPropagation()
            ev.preventDefault()
            document[context_menu_name].close()
            d = Dialog(f'Add {etype.__name__}', ok_cancel=True)
            d.panel <= dataClassEditorForm(None, etype)

            @bind(d.ok_button, 'click')
            def on_ok(ev):
                data = getFormValues(d.panel, etype)
                new_object = etype(parent=parent, **data)
                api.add_element(new_object)
                document[parent] <= render_hierarchy([new_object])
                d.close()

        def mk_menu_item(text, action):
            item = html.LI(text)
            item.bind('click', action)
            return item

        def bind_add_action(item):
            return mk_menu_item(item.__name__, lambda ev: on_add(ev, item, data_element.Id))

        @bind(html_element, 'contextmenu')
        def contextfunc(ev):
            create = api.get_allowed_children(data_element.Id)
            ev.stopPropagation()
            ev.preventDefault()
            createmenu = html.LI('Create')
            createmenu <= html.UL([bind_add_action(t) for t in create])
            menu = html.UL(Class='contextmenu')
            menu <= createmenu
            menu <= html.HR()
            menu <= mk_menu_item('Rename', on_rename)
            menu <= html.HR()
            menu <= mk_menu_item('Remove', on_delete)
            #d = Dialog("", ok_cancel=True)
            d = document[context_menu_name]
            d.clear()
            d <= menu
            html_element <= d
            d.showModal()

        for c in html_element.select('.caret'):
            c.bind('click', toggle_caret)

    def render_hierarchy(data_list):
        results = []
        for element in data_list:
            # Check if the caret is needed
            de = html.DIV()
            icon = element.get_icon()
            if (children := getattr(element, 'children', None)) is not None:
                de <= html.SPAN(Class="caret fa fa-caret-right", style="width:1em")
            de <= html.SPAN(Class=f"fa fa-{icon}", style="margin-left:1em")
            de <= html.SPAN(format_name(element.name), Class=name_cls)

            d = html.DIV(de, Class=line_cls, id=element.Id)
            d.value = element

            bind_events(element, d)

            if children:
                ch = render_hierarchy(element.children)
                for c in ch:
                    c.style['display'] = 'none'
                d <= ch
            results.append(d)
        return results

    def start(elements):
        holder <= render_hierarchy(elements)

    api.get_elements_async(start)

