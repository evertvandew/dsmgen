<%
"""
    Template for generating the client for the visual modelling environment.
    The tool expects only a definition construct.
    This

    The generated client uses the Brython Python-In-A-Browser technology.
"""

from dataclasses import fields

%><!doctype html>
<html>

<head>
<meta charset="utf-8">
<script type="text/javascript" src="/src/brython.js"></script>
<script type="text/javascript" src="/src/brython_stdlib.js"></script>
<link rel="stylesheet" type="text/css" href="/assets/css/fontawesome.min.css" />
<link rel="stylesheet" type="text/css" href="/assets/css/solid.min.css" />


    <style>
        .eline {margin-left: 1em;}
    </style>
</head>


<body onload="brython(1)">
    <div id="canvas" width="100%" height="700px"
    </div>

    <script type="text/python">
        """
        Visual Modelling client.
        """

        from browser import document, console, html, window, bind, ajax
        from explorer import Element, make_explorer, ExplorerDataApi, context_menu_name
        from dataclasses import dataclass, field
        from typing import Self, List, Dict, Any
        from collections.abc import Iterable
        import typing
        import types
        from enum import IntEnum

        class longstr(str): pass

        # Modelling 'Entities:'
        % for entity in generator.ordered_items:
        @dataclass
        class ${entity.__name__}:
            Id: int = 0
            % for f in fields(entity):
            ## All elements must have a default value so they can be created from scratch
            ${f.name}: ${generator.get_type(f.type)} = ${generator.get_default(f.type)}
            % endfor
            % if not entity in generator.md.relationship:
            order: int = 0
            children: List[Any] = field(default_factory=list)
            % endif

        % endfor

        allowed_children = {
            % for name in generator.all_names.keys():
            ${name}: [${', '.join(generator.children[name])}],
            % endfor
        }


        class API(ExplorerDataApi):
            def get_allowed_children(self, id: str):
                cls = getClass(id)
                return allowed_children[cls]
            def get_elements_async(self, cb):
                def on_data(data):
                    console.log(f'data: {data}')
                    records = []
                    for d in data.json:
                        cls = globals()[d['__classname__']]
                        ddict = {k:v for k, v in d.items() if k != '__classname__'}
                        records.append(cls(**ddict))
                    self.records = records
                    console.log(f'records: {records}')
                    cb(self.records)
                ajax.get('data/hierarchy', mode="json", oncomplete=on_data)
            def get_element(self, id: str) -> Element:
                raise NotImplementedError
            def add_element(self, details: Element, parent: str):
                """ Persist a new element created with the right-click menu """
                raise NotImplementedError
            def move_element(self, id: str):
                """ Called when an element is moved in the hierarchy. """
                raise NotImplementedError
            def delete_element(self, id: str) -> bool:
                """ Called when an element is deleted.
                    Returns True if the delete was successful, false if not.
                """
                raise NotImplementedError
            def on_click(self, id: str):
                """ Called when an element was left-clicked. """
                raise NotImplementedError

        blank = document["canvas"];
        blank <= html.DIALOG(id=context_menu_name)
        make_explorer(blank, API())

        @bind(blank, 'click')
        @bind(document[context_menu_name], 'click')
        def close_contextmenu(ev):
            ev.stopPropagation()
            ev.preventDefault()
            document[context_menu_name].close()
    </script>
</body>

</html>