# Use me using the "tatsu" Python library
@@grammar::GML
@@whitespace::/[\t\n\r ]+/
# @@eol_comments::/\/\/(^\n]*?$/
# @@comments::/\/\*((?:.|\n)*?)\*\//

start = statement_list $ ;

statement_list = { statement };
statement = | import | enum_definition | struct_definition | widget_definition | main_window ;

import = 'use' '::'.{ variable_name | ( '{' import '}' ) } ;

struct_definition = 'struct' type_name '{' ','.{ property_declaration | event_declaration } '}' ;

property_declaration = 'property' variable_name ':' type_reference [ '=' default_value ] ;
event_declaration = 'event' variable_name ':' type_reference ;

enum_definition = 'enum' type_name '{' ','.{ enum_item } '}' ;

enum_item = type_name [ tuple_type | struct_type ] ;

widget_definition = 'widget' type_name widget_details ;

widget_details = '{' ','.{
    | property_declaration
    | event_declaration
    | item_declaration
    | fsm_declaration
} '}' ;

main_window = 'main' widget_details ;

item_declaration = 'item' [ variable_name ':' ] expression ;

fsm_declaration = 'fsm' variable_name '{' ','.{ state_declaration | transition } '}' ;

state_declaration = 'state' variable_name '{' ','.{
      property_declaration
    | item_declaration
    | fsm_declaration
} '}' ;

transition = "transit" "from" variable_name "to" variable_name "when" single_expression ;

lhs =
    | fn_invocation
    | array_index
    | field_expression
    | variable_name ;

single_expression =
    | match_expression
    | if_expression
    | struct_construction
    | binop
    | parenthesized_expression
    | unop
    | closure_definition
    | lhs
    | literal_value ;

expression =
    | assignment
    | block_expression
    | single_expression ;

block_expression = '{' ';'.{ expression | () } '}' ;

match_expression = 'match' lhs '{' ','.{ match_clause '=>' expression } '}' ;

if_expression = 'if' single_expression block_expression [ 'else' block_expression ] ;

match_clause = default_match_branch | enum_reference | single_expression ;

fn_invocation = lhs '(' ','.{ [ variable_name ':' ] single_expression } ')' ;

field_expression = lhs '.' ( variable_name | /[0-9]+/ ) ;

array_index = lhs '[' single_expression ']' ;

closure_definition = '|' ','.{variable_name} '|' expression ;

binop = single_expression operator single_expression ;

struct_construction = variable_name '{' ','.{ variable_name ':' single_expression } '}' ;

assignment = lhs assignment_operator single_expression ;

unop = unary_operator single_expression ;

parenthesized_expression = '(' single_expression ')' ;

enum_reference = '.'{ type_name } [ '(' ','.{ variable_name } ')' | '{' ','.{ variable_name } '}' ] ;

type_reference =
    | function_type
    | type_name
    | no_type
    | tuple_type
    | struct_type ;

function_type = "fn(" ','.{ type_reference } ")" [ "->" type_reference ] ;
tuple_type = '(' ','.{ type_reference } ')' ;
struct_type = '{' ','.{ variable_name ':' type_reference } '}' ;

default_value = literal_value ;

literal_value =
    | float_literal
    | int_literal
    | bool_literal
    | tuple_literal
    | array_literal
    | string_literal ;

string_literal = /".*?"/ | /'.*?'/ ;
float_literal = /[0-9]*[.][0-9]*/ ;
int_literal = /[0-9]+/ ;
bool_literal = "true" | "false" ;
tuple_literal = '(' ','.{ single_expression } ')' ;
array_literal = '[' ','.{ single_expression } ']' ;


variable_name = name ;
type_name = name ;

name = /[a-zA-Z_][a-zA-Z0-9_]*/ ;

no_type = '()' ;
unary_operator = !'->' '+' | '-' | '!' ;
operator = !('->' | '=>') '+' | '-' | '*' | '/' | '%' | '>>' | '<<' | '>' | '<' | '>=' | '<=' | '==' | '!=' | '&&' | '||' | '..=' | '..' ;
assignment_operator = !'=>' '=' ;
default_match_branch = '_' ;
